{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about-us/","text":"At Protect AI we're building a safer AI Powered World by empowering a community of ML security researchers, finding unique exploits, and providing tools that to reduce risk inherent in MLOps pipelines. Learn more about us at protectai.com and check out our GitHub !","title":"About Us"},{"location":"faq/","text":"Thank you for your interest in NB Defense. We want to make tools with the community that data scientist and engineers can use and enjoy. Welcome to the community! Common Questions Why should I use NB Defense as a data scientist? We know that JupyterLab is where many data scientist experiement and prove out their ideas. The NB Defense JupyterLab Extension and CLI allows you to check for vulnerabilities and security issues before the code leaves your environment. You can use NB Defense to check for personally identifiable information, secrets, common exposures and vulnerabilites, and non permissive licenses with the click of the button. We wanted to create a way for data scientists to reduce exposure to security issues and save time later on, by integrating good security practices into the development process. Can I run NB Defense in my CI pipeline? Yes, you can run NB Defense in your CI pipline using the NB Defense CLI ! Use the CLI in your CI pipelines to scan repositories, or multiple notebooks at a time. What is special about NB Defense when many security tools offer similar functionality? NB Defense is special because it allows you to scan Jupyter Notebooks. We provide both a JupyterLab Extension that you can use to scan notebooks while you're working, and a CLI that you can use to scan groups of notebooks or repositories. Using both of these tools, you can scan your notebooks for personally identifiable information (PII), secrets, common exposures and vulnerabilities (CVEs), and non permissive licenses. Does NB Defense JupyterLab Extension run in my kernel? We recommend that you isolate NB Defense from the kernel that you are using for your notebook. If you have installed NB Defense into a separate python environment, it will not run in your kernel. We do use your active kernels python path to determine which third party dependencies are installed, so we can scan them for CVEs and licenses. Found A Bug? \ud83d\udc1e Found an issue with the NB Defense CLI or JupyterLab Extension? Lets get that fixed. Let us know what you've found by opening an issue using the following links: NB Defense Bug (SDK and CLI) NB Defense Jupyter Bug (JupyterLab Extension) Found An Issue With Our Documentation? \ud83d\udcc4 We want to be clear, correct, and concise. Let us know where we can improve: NB Defense Documentation Issue (SDK, CLI and JupyterLab Extension) Have An Idea For A New Feature? \ud83d\udca1 We'd love to hear about it. Tell us more by creating an issue below: NB Defense Feature Request (SDK and CLI) NB Defense Jupyter Feature Request (JupyterLab Extension) Have A Question? \u2753 Feel free to ask questions using github discussions by following the links below: NB Defense Discussions (SDK and CLI) NB Defense Jupyter Discussions (JupyterLab Extension)","title":"FAQ"},{"location":"faq/#common-questions","text":"","title":"Common Questions"},{"location":"faq/#why-should-i-use-nb-defense-as-a-data-scientist","text":"We know that JupyterLab is where many data scientist experiement and prove out their ideas. The NB Defense JupyterLab Extension and CLI allows you to check for vulnerabilities and security issues before the code leaves your environment. You can use NB Defense to check for personally identifiable information, secrets, common exposures and vulnerabilites, and non permissive licenses with the click of the button. We wanted to create a way for data scientists to reduce exposure to security issues and save time later on, by integrating good security practices into the development process.","title":"Why should I use NB Defense as a data scientist?"},{"location":"faq/#can-i-run-nb-defense-in-my-ci-pipeline","text":"Yes, you can run NB Defense in your CI pipline using the NB Defense CLI ! Use the CLI in your CI pipelines to scan repositories, or multiple notebooks at a time.","title":"Can I run NB Defense in my CI pipeline?"},{"location":"faq/#what-is-special-about-nb-defense-when-many-security-tools-offer-similar-functionality","text":"NB Defense is special because it allows you to scan Jupyter Notebooks. We provide both a JupyterLab Extension that you can use to scan notebooks while you're working, and a CLI that you can use to scan groups of notebooks or repositories. Using both of these tools, you can scan your notebooks for personally identifiable information (PII), secrets, common exposures and vulnerabilities (CVEs), and non permissive licenses.","title":"What is special about NB Defense when many security tools offer similar functionality?"},{"location":"faq/#does-nb-defense-jupyterlab-extension-run-in-my-kernel","text":"We recommend that you isolate NB Defense from the kernel that you are using for your notebook. If you have installed NB Defense into a separate python environment, it will not run in your kernel. We do use your active kernels python path to determine which third party dependencies are installed, so we can scan them for CVEs and licenses.","title":"Does NB Defense JupyterLab Extension run in my kernel?"},{"location":"faq/#found-a-bug","text":"Found an issue with the NB Defense CLI or JupyterLab Extension? Lets get that fixed. Let us know what you've found by opening an issue using the following links: NB Defense Bug (SDK and CLI) NB Defense Jupyter Bug (JupyterLab Extension)","title":"Found A Bug? \ud83d\udc1e"},{"location":"faq/#found-an-issue-with-our-documentation","text":"We want to be clear, correct, and concise. Let us know where we can improve: NB Defense Documentation Issue (SDK, CLI and JupyterLab Extension)","title":"Found An Issue With Our Documentation? \ud83d\udcc4"},{"location":"faq/#have-an-idea-for-a-new-feature","text":"We'd love to hear about it. Tell us more by creating an issue below: NB Defense Feature Request (SDK and CLI) NB Defense Jupyter Feature Request (JupyterLab Extension)","title":"Have An Idea For A New Feature? \ud83d\udca1"},{"location":"faq/#have-a-question","text":"Feel free to ask questions using github discussions by following the links below: NB Defense Discussions (SDK and CLI) NB Defense Jupyter Discussions (JupyterLab Extension)","title":"Have A Question? \u2753"},{"location":"have-an-issue/","text":"Thank you for your interest in contributing to NB Defense. We want to make tools with the community that data scientist and engineers can use and enjoy. Welcome to the community! Found A Bug? \ud83d\udc1e Found an issue with the NB Defense CLI or Jupyter Lab Extension? Lets get that fixed. Let us know what you've found by opening an issue using the following links: NB Defense Bug (SDK and CLI) NB Defense Jupyter Bug (Jupyter Lab Extension) Found An Issue With Our Documentation? \ud83d\udcc4 We want to be clear, correct, and concise. Let us know where we can improve: NB Defense Documentation Issue (SDK, CLI and Jupyter Lab Extension) Have An Idea For A New Feature? \ud83d\udca1 We'd love to hear about it. Tell us more by creating an issue below: NB Defense Feature Request (SDK and CLI) NB Defense Jupyter Feature Request (Jupyter Lab Extension) Have A Question? \u2753 Feel free to ask questions using github discussions by following the links below: NB Defense Discussions (SDK and CLI) NB Defense Jupyter Discussions (Jupyter Lab Extension)","title":"Have an issue"},{"location":"have-an-issue/#found-a-bug","text":"Found an issue with the NB Defense CLI or Jupyter Lab Extension? Lets get that fixed. Let us know what you've found by opening an issue using the following links: NB Defense Bug (SDK and CLI) NB Defense Jupyter Bug (Jupyter Lab Extension)","title":"Found A Bug? \ud83d\udc1e"},{"location":"have-an-issue/#found-an-issue-with-our-documentation","text":"We want to be clear, correct, and concise. Let us know where we can improve: NB Defense Documentation Issue (SDK, CLI and Jupyter Lab Extension)","title":"Found An Issue With Our Documentation? \ud83d\udcc4"},{"location":"have-an-issue/#have-an-idea-for-a-new-feature","text":"We'd love to hear about it. Tell us more by creating an issue below: NB Defense Feature Request (SDK and CLI) NB Defense Jupyter Feature Request (Jupyter Lab Extension)","title":"Have An Idea For A New Feature? \ud83d\udca1"},{"location":"have-an-issue/#have-a-question","text":"Feel free to ask questions using github discussions by following the links below: NB Defense Discussions (SDK and CLI) NB Defense Jupyter Discussions (Jupyter Lab Extension)","title":"Have A Question? \u2753"},{"location":"getting-started/","text":"Getting Started NB Defense is an open source tool for detecting security issues in Jupyter Notebooks. These issues can range from detecting leaked PII in your notebook output to detecting vulnerable versions of installed dependencies. There are currently two tools that you can use to scan your notebooks with NB Defense. Choose the tool for you The JupyterLab Extension Using the JupyterLab Extension is ideal for correcting issues directly within the JupyterLab environment. You can quickly scan and re-scan a single notebook in order to correct any potential security issues within your environment. Jupyter Extension Example Try it out! The CLI The CLI is a better option if you have a lot of notebooks that you would like to scan simultaneously or if you would like to automatically scan notebooks that are going into a central repository. It can also help you set a baseline for correcting individual notebooks with the JupyterLab Extension at a later time. Try it out!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"NB Defense is an open source tool for detecting security issues in Jupyter Notebooks. These issues can range from detecting leaked PII in your notebook output to detecting vulnerable versions of installed dependencies. There are currently two tools that you can use to scan your notebooks with NB Defense.","title":"Getting Started"},{"location":"getting-started/#choose-the-tool-for-you","text":"","title":"Choose the tool for you"},{"location":"getting-started/#the-jupyterlab-extension","text":"Using the JupyterLab Extension is ideal for correcting issues directly within the JupyterLab environment. You can quickly scan and re-scan a single notebook in order to correct any potential security issues within your environment. Jupyter Extension Example Try it out!","title":"The JupyterLab Extension"},{"location":"getting-started/#the-cli","text":"The CLI is a better option if you have a lot of notebooks that you would like to scan simultaneously or if you would like to automatically scan notebooks that are going into a central repository. It can also help you set a baseline for correcting individual notebooks with the JupyterLab Extension at a later time. Try it out!","title":"The CLI"},{"location":"getting-started/cli/","text":"Installation Activate the Python environment that you would like to install the NB Defense CLI to. Install the extension with pip: pip install nbdefense (Optional) Install the Spacy model for PII detection with: python -m spacy download en_core_web_trf Spacy model download This is required for the PII plugin to operate. If you do not install the en_core_web_trf model, then you will get the following error message in the scan output with the PII plugin activated: Error occurred in the scan portion of the PII Plugin plugin. Message: [E050] Can't find model 'en_core_web_trf'. It doesn't seem to be a Python package or a valid path to a data directory. Check that the CLI is installed with: nbdefense --help And you should see an output like this: Usage: nbdefense [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. -v, --verbose --help Show this message and exit. Commands: scan Scan [PATH] for .ipynb files for potential issues. settings Commands related to NB Defense settings. Usage The NB Defense CLI has two core commands: nbdefense scan Help output: Usage: nbdefense scan [OPTIONS] [PATH] Scan [PATH] for .ipynb files for potential issues. Options: -r, --recursive Scan all nested directories for .ipynb files. -s, --serve Run an HTTP Server to view the report instead of persisting the report as an html file. -q, --quiet Suppress all output. -d, --dependency-file PATH Specify a requirements.txt file to scan for CVEs and license compatibility. -f, --output-file FILE Specify an output filename for the report. -o, --output-format [json|html] The output format for the report. -y, --yes Bypass all prompts with an affirmative response. --settings-file FILE Specify a settings file to use for the scan. Defaults to [PATH]/settings.toml. --no-progress-bars Hide progress bars, but keep other logging active. --help Show this message and exit. The scan command is the main functionality of the NB Defense CLI. Running a scan will create a scan report that can be formatted as JSON or HTML. nbdefense settings create Help output: Usage: nbdefense settings create [OPTIONS] Create a settings file in the current working directory. Options: -f, --force Overwrite existing settings file if it exists. -l, --location FILE The specific filepath to write the settings.toml file. --help Show this message and exit. This will create a settings.toml file which allows you to change certain scan settings. More information about NB Defense scan settings can be found on the Scan Settings page . Interpreting Scan Results Scan results can be generated as either HTML or JSON. The HTML results will be more human readable and can be served using the --serve flag, where the JSON results are better for parsing with machine output. The JSON reports are used to generate the HTML report and the scan results screen of the JupyterLab Extension. The HTML Report HTML is the default output format for the NB Defense CLI. There are two sections of the HTML report that will always be present: The header Contains information such as the number of files that were scanned, how many checks were run, and the timestamp of when the scan was run. Also has a button to view which files were scanned for this run. The issues list The report also includes a list of all of the issues found while scanning the notebook/directory. These issues are sorted by severity and will contain all relevant information for the detected issue. An errors section of the report may be present if an exception happened during the scan. The JSON Report Here is an example JSON report output: output.json { \"root\" : \"nbdefense-demo\" , \"root_issues\" : [ { \"code\" : \"UNAPPROVED_LICENSE_DEP_FILE\" , \"severity\" : \"MEDIUM\" , \"details\" : { \"package_name\" : \"matplotlibXtns\" , \"package_version\" : \"20.5\" , \"unapproved_license\" : \"GNU General Public License (GPL)\" , \"file_path\" : \"nbdefense-demo/requirements.txt\" } }, { \"code\" : \"VULNERABLE_DEPENDENCY_DEP_FILE\" , \"severity\" : \"CRITICAL\" , \"details\" : { \"file_path\" : \"nbdefense-demo/requirements.txt\" , \"results\" : { \"VulnerabilityID\" : \"CVE-2022-0845\" , \"PkgName\" : \"pytorch-lightning\" , \"InstalledVersion\" : \"1.5.10\" , \"FixedVersion\" : \"1.6.0\" , \"Layer\" : {}, \"SeveritySource\" : \"nvd\" , \"PrimaryURL\" : \"https://avd.aquasec.com/nvd/cve-2022-0845\" , \"DataSource\" : { \"ID\" : \"osv\" , \"Name\" : \"Python Packaging Advisory Database\" , \"URL\" : \"https://github.com/pypa/advisory-db\" }, \"Title\" : \"Code Injection in PyTorch Lightning\" , \"Description\" : \"Code Injection in GitHub repository pytorchlightning/pytorch-lightning prior to 1.6.0.\" , \"Severity\" : \"CRITICAL\" , \"CweIDs\" : [ \"CWE-94\" ], \"CVSS\" : { \"ghsa\" : { \"V3Vector\" : \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\" , \"V3Score\" : 9.8 }, \"nvd\" : { \"V2Vector\" : \"AV:N/AC:L/Au:N/C:C/I:C/A:C\" , \"V3Vector\" : \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\" , \"V2Score\" : 10 , \"V3Score\" : 9.8 } }, \"References\" : [ \"https://github.com/PyTorchLightning/pytorch-lightning/pull/12212\" , \"https://github.com/advisories/GHSA-r5qj-cvf9-p85h\" , \"https://github.com/pypa/advisory-database/tree/main/vulns/pytorch-lightning/PYSEC-2022-181.yaml\" , \"https://github.com/pytorchlightning/pytorch-lightning/commit/8b7a12c52e52a06408e9231647839ddb4665e8ae\" , \"https://huntr.dev/bounties/a795bf93-c91e-4c79-aae8-f7d8bda92e2a\" , \"https://nvd.nist.gov/vuln/detail/CVE-2022-0845\" ], \"PublishedDate\" : \"2022-03-05T22:15:00Z\" , \"LastModifiedDate\" : \"2022-03-10T22:00:00Z\" } } } ], \"plugins\" : [ { \"name\" : \"PII Plugin\" , \"settings\" : { \"enabled\" : true , \"confidence_threshold\" : 0.8 , \"entities\" : { \"US_PASSPORT\" : true , \"AU_MEDICARE\" : true , \"AU_TFN\" : true , \"AU_ACN\" : true , \"AU_ABN\" : true , \"UK_NHS\" : true , \"US_SSN\" : true , \"US_ITIN\" : true , \"US_DRIVER_LICENSE\" : true , \"US_BANK_NUMBER\" : true , \"MEDICAL_LICENSE\" : true , \"LOCATION\" : true , \"PHONE_NUMBER\" : true , \"NRP\" : true , \"IP_ADDRESS\" : true , \"EMAIL_ADDRESS\" : true , \"IBAN_CODE\" : true , \"CRYPTO\" : true , \"CREDIT_CARD\" : true , \"PERSON\" : true } } }, { \"name\" : \"Secrets Plugin\" , \"settings\" : { \"enabled\" : true , \"secrets_plugins\" : [ { \"name\" : \"SoftlayerDetector\" }, { \"name\" : \"StripeDetector\" }, { \"name\" : \"SendGridDetector\" }, { \"name\" : \"NpmDetector\" }, { \"name\" : \"KeywordDetector\" , \"keyword_exclude\" : \"\" }, { \"name\" : \"IbmCosHmacDetector\" }, { \"name\" : \"DiscordBotTokenDetector\" }, { \"name\" : \"BasicAuthDetector\" }, { \"name\" : \"AzureStorageKeyDetector\" }, { \"name\" : \"ArtifactoryDetector\" }, { \"name\" : \"AWSKeyDetector\" }, { \"name\" : \"CloudantDetector\" }, { \"name\" : \"GitHubTokenDetector\" }, { \"name\" : \"IbmCloudIamDetector\" }, { \"name\" : \"JwtTokenDetector\" }, { \"name\" : \"MailchimpDetector\" }, { \"name\" : \"PrivateKeyDetector\" }, { \"name\" : \"SlackDetector\" }, { \"name\" : \"SquareOAuthDetector\" }, { \"name\" : \"TwilioKeyDetector\" }, { \"name\" : \"Base64HighEntropyString\" , \"limit\" : 4.5 }, { \"name\" : \"HexHighEntropyString\" , \"limit\" : 3.0 } ] } }, { \"name\" : \"License Plugin for Dependency Files\" , \"settings\" : { \"enabled\" : true , \"accepted_licenses\" : [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" ] } }, { \"name\" : \"CVE Plugin for Dependency Files\" , \"settings\" : { \"enabled\" : true } } ], \"notebooks\" : [ \"nbdefense-demo/Untitled1.ipynb\" , \"nbdefense-demo/notebook_1.ipynb\" , \"nbdefense-demo/Untitled.ipynb\" , \"nbdefense-demo/notebook_2.ipynb\" ], \"notebook_issues\" : [ { \"path\" : \"nbdefense-demo/Untitled1.ipynb\" , \"issues\" : [] }, { \"path\" : \"nbdefense-demo/notebook_1.ipynb\" , \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 0 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"#!pip install [PII]\" }, \"location\" : \"INPUT\" , \"details\" : { \"description\" : \"A total of 1 PII found in cell number 0\" , \"summary_field\" : { \"PERSON\" : 1 } }, \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 0 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"#!pip install [PII]\" }, \"line_index\" : 0 , \"location\" : \"INPUT\" , \"character_start_index\" : 14 , \"character_end_index\" : 19 , \"details\" : null } ] } ] }, { \"path\" : \"nbdefense-demo/Untitled.ipynb\" , \"issues\" : [] }, { \"path\" : \"nbdefense-demo/notebook_2.ipynb\" , \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"location\" : \"INPUT\" , \"details\" : { \"description\" : \"A total of 2 PII found in cell number 11\" , \"summary_field\" : { \"PERSON\" : 2 } }, \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"line_index\" : 2 , \"location\" : \"INPUT\" , \"character_start_index\" : 7 , \"character_end_index\" : 21 , \"details\" : null }, { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"line_index\" : 3 , \"location\" : \"INPUT\" , \"character_start_index\" : 1 , \"character_end_index\" : 14 , \"details\" : null } ] }, { \"code\" : \"SECRETS\" , \"severity\" : \"CRITICAL\" , \"cell\" : { \"cell_index\" : 8 , \"cell_type\" : \"MARKDOWN\" , \"scrubbed_content\" : \"### aws_access_key_id=\\\"AK..6C\\\"\\n\\n\\n\\n\\nsixth line\" }, \"line_index\" : 0 , \"location\" : \"INPUT\" , \"character_start_index\" : 23 , \"character_end_index\" : 43 , \"details\" : { \"description\" : \"AWS Access Key\" , \"summary_field\" : null } } ] } ], \"errors\" : [ { \"error_type\" : \"SCAN\" , \"plugin_name\" : \"PII Plugin\" , \"message\" : \"error message\" } ] } The root element This is the PATH that was passed to the nbdefense scan PATH command. { \"root\" : \"nbdefense-demo\" , ... } The root_issues element Contains all of the issues related to the dependency file. This includes any CVEs or license issues. { ... , \"root_issues\" : [ { ISSUE_CONTENTS } ], ... } The plugins element An array containing the plugins that were run in the scan. Also includes the settings for the plugins. { ... , \"plugins\" : [ { PLUGIN_SETTINGS } ], ... } The notebooks element The list of notebooks included in this scan. { ... , \"notebooks\" : [ \"nbdefense-demo/notebook_1.ipynb\" ], ... } The notebook_issues element A list of objects containing paths and issues for each notebook. { ... , \"notebook_issues\" : [ { \"path\" : \"nbdefense-demo/notebook_1.ipynb\" , \"issues\" : [ { ISSUE_CONTENTS } ] } ], ... } The errors element A list of the errors that occurred during the scan. This element will only be included if at least one error occurs during the scan. { ... , \"errors\" : [ { ERROR_CONTENTS } ], ... } Adjusting Scan Settings You can change and update settings for your scan from a settings.toml file. More info is available on the Scan Settings page.","title":"CLI"},{"location":"getting-started/cli/#installation","text":"Activate the Python environment that you would like to install the NB Defense CLI to. Install the extension with pip: pip install nbdefense (Optional) Install the Spacy model for PII detection with: python -m spacy download en_core_web_trf Spacy model download This is required for the PII plugin to operate. If you do not install the en_core_web_trf model, then you will get the following error message in the scan output with the PII plugin activated: Error occurred in the scan portion of the PII Plugin plugin. Message: [E050] Can't find model 'en_core_web_trf'. It doesn't seem to be a Python package or a valid path to a data directory. Check that the CLI is installed with: nbdefense --help And you should see an output like this: Usage: nbdefense [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. -v, --verbose --help Show this message and exit. Commands: scan Scan [PATH] for .ipynb files for potential issues. settings Commands related to NB Defense settings.","title":"Installation"},{"location":"getting-started/cli/#usage","text":"The NB Defense CLI has two core commands:","title":"Usage"},{"location":"getting-started/cli/#nbdefense-scan","text":"Help output: Usage: nbdefense scan [OPTIONS] [PATH] Scan [PATH] for .ipynb files for potential issues. Options: -r, --recursive Scan all nested directories for .ipynb files. -s, --serve Run an HTTP Server to view the report instead of persisting the report as an html file. -q, --quiet Suppress all output. -d, --dependency-file PATH Specify a requirements.txt file to scan for CVEs and license compatibility. -f, --output-file FILE Specify an output filename for the report. -o, --output-format [json|html] The output format for the report. -y, --yes Bypass all prompts with an affirmative response. --settings-file FILE Specify a settings file to use for the scan. Defaults to [PATH]/settings.toml. --no-progress-bars Hide progress bars, but keep other logging active. --help Show this message and exit. The scan command is the main functionality of the NB Defense CLI. Running a scan will create a scan report that can be formatted as JSON or HTML.","title":"nbdefense scan"},{"location":"getting-started/cli/#nbdefense-settings-create","text":"Help output: Usage: nbdefense settings create [OPTIONS] Create a settings file in the current working directory. Options: -f, --force Overwrite existing settings file if it exists. -l, --location FILE The specific filepath to write the settings.toml file. --help Show this message and exit. This will create a settings.toml file which allows you to change certain scan settings. More information about NB Defense scan settings can be found on the Scan Settings page .","title":"nbdefense settings create"},{"location":"getting-started/cli/#interpreting-scan-results","text":"Scan results can be generated as either HTML or JSON. The HTML results will be more human readable and can be served using the --serve flag, where the JSON results are better for parsing with machine output. The JSON reports are used to generate the HTML report and the scan results screen of the JupyterLab Extension.","title":"Interpreting Scan Results"},{"location":"getting-started/cli/#the-html-report","text":"HTML is the default output format for the NB Defense CLI. There are two sections of the HTML report that will always be present: The header Contains information such as the number of files that were scanned, how many checks were run, and the timestamp of when the scan was run. Also has a button to view which files were scanned for this run. The issues list The report also includes a list of all of the issues found while scanning the notebook/directory. These issues are sorted by severity and will contain all relevant information for the detected issue. An errors section of the report may be present if an exception happened during the scan.","title":"The HTML Report"},{"location":"getting-started/cli/#the-json-report","text":"Here is an example JSON report output: output.json { \"root\" : \"nbdefense-demo\" , \"root_issues\" : [ { \"code\" : \"UNAPPROVED_LICENSE_DEP_FILE\" , \"severity\" : \"MEDIUM\" , \"details\" : { \"package_name\" : \"matplotlibXtns\" , \"package_version\" : \"20.5\" , \"unapproved_license\" : \"GNU General Public License (GPL)\" , \"file_path\" : \"nbdefense-demo/requirements.txt\" } }, { \"code\" : \"VULNERABLE_DEPENDENCY_DEP_FILE\" , \"severity\" : \"CRITICAL\" , \"details\" : { \"file_path\" : \"nbdefense-demo/requirements.txt\" , \"results\" : { \"VulnerabilityID\" : \"CVE-2022-0845\" , \"PkgName\" : \"pytorch-lightning\" , \"InstalledVersion\" : \"1.5.10\" , \"FixedVersion\" : \"1.6.0\" , \"Layer\" : {}, \"SeveritySource\" : \"nvd\" , \"PrimaryURL\" : \"https://avd.aquasec.com/nvd/cve-2022-0845\" , \"DataSource\" : { \"ID\" : \"osv\" , \"Name\" : \"Python Packaging Advisory Database\" , \"URL\" : \"https://github.com/pypa/advisory-db\" }, \"Title\" : \"Code Injection in PyTorch Lightning\" , \"Description\" : \"Code Injection in GitHub repository pytorchlightning/pytorch-lightning prior to 1.6.0.\" , \"Severity\" : \"CRITICAL\" , \"CweIDs\" : [ \"CWE-94\" ], \"CVSS\" : { \"ghsa\" : { \"V3Vector\" : \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\" , \"V3Score\" : 9.8 }, \"nvd\" : { \"V2Vector\" : \"AV:N/AC:L/Au:N/C:C/I:C/A:C\" , \"V3Vector\" : \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\" , \"V2Score\" : 10 , \"V3Score\" : 9.8 } }, \"References\" : [ \"https://github.com/PyTorchLightning/pytorch-lightning/pull/12212\" , \"https://github.com/advisories/GHSA-r5qj-cvf9-p85h\" , \"https://github.com/pypa/advisory-database/tree/main/vulns/pytorch-lightning/PYSEC-2022-181.yaml\" , \"https://github.com/pytorchlightning/pytorch-lightning/commit/8b7a12c52e52a06408e9231647839ddb4665e8ae\" , \"https://huntr.dev/bounties/a795bf93-c91e-4c79-aae8-f7d8bda92e2a\" , \"https://nvd.nist.gov/vuln/detail/CVE-2022-0845\" ], \"PublishedDate\" : \"2022-03-05T22:15:00Z\" , \"LastModifiedDate\" : \"2022-03-10T22:00:00Z\" } } } ], \"plugins\" : [ { \"name\" : \"PII Plugin\" , \"settings\" : { \"enabled\" : true , \"confidence_threshold\" : 0.8 , \"entities\" : { \"US_PASSPORT\" : true , \"AU_MEDICARE\" : true , \"AU_TFN\" : true , \"AU_ACN\" : true , \"AU_ABN\" : true , \"UK_NHS\" : true , \"US_SSN\" : true , \"US_ITIN\" : true , \"US_DRIVER_LICENSE\" : true , \"US_BANK_NUMBER\" : true , \"MEDICAL_LICENSE\" : true , \"LOCATION\" : true , \"PHONE_NUMBER\" : true , \"NRP\" : true , \"IP_ADDRESS\" : true , \"EMAIL_ADDRESS\" : true , \"IBAN_CODE\" : true , \"CRYPTO\" : true , \"CREDIT_CARD\" : true , \"PERSON\" : true } } }, { \"name\" : \"Secrets Plugin\" , \"settings\" : { \"enabled\" : true , \"secrets_plugins\" : [ { \"name\" : \"SoftlayerDetector\" }, { \"name\" : \"StripeDetector\" }, { \"name\" : \"SendGridDetector\" }, { \"name\" : \"NpmDetector\" }, { \"name\" : \"KeywordDetector\" , \"keyword_exclude\" : \"\" }, { \"name\" : \"IbmCosHmacDetector\" }, { \"name\" : \"DiscordBotTokenDetector\" }, { \"name\" : \"BasicAuthDetector\" }, { \"name\" : \"AzureStorageKeyDetector\" }, { \"name\" : \"ArtifactoryDetector\" }, { \"name\" : \"AWSKeyDetector\" }, { \"name\" : \"CloudantDetector\" }, { \"name\" : \"GitHubTokenDetector\" }, { \"name\" : \"IbmCloudIamDetector\" }, { \"name\" : \"JwtTokenDetector\" }, { \"name\" : \"MailchimpDetector\" }, { \"name\" : \"PrivateKeyDetector\" }, { \"name\" : \"SlackDetector\" }, { \"name\" : \"SquareOAuthDetector\" }, { \"name\" : \"TwilioKeyDetector\" }, { \"name\" : \"Base64HighEntropyString\" , \"limit\" : 4.5 }, { \"name\" : \"HexHighEntropyString\" , \"limit\" : 3.0 } ] } }, { \"name\" : \"License Plugin for Dependency Files\" , \"settings\" : { \"enabled\" : true , \"accepted_licenses\" : [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" ] } }, { \"name\" : \"CVE Plugin for Dependency Files\" , \"settings\" : { \"enabled\" : true } } ], \"notebooks\" : [ \"nbdefense-demo/Untitled1.ipynb\" , \"nbdefense-demo/notebook_1.ipynb\" , \"nbdefense-demo/Untitled.ipynb\" , \"nbdefense-demo/notebook_2.ipynb\" ], \"notebook_issues\" : [ { \"path\" : \"nbdefense-demo/Untitled1.ipynb\" , \"issues\" : [] }, { \"path\" : \"nbdefense-demo/notebook_1.ipynb\" , \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 0 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"#!pip install [PII]\" }, \"location\" : \"INPUT\" , \"details\" : { \"description\" : \"A total of 1 PII found in cell number 0\" , \"summary_field\" : { \"PERSON\" : 1 } }, \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 0 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"#!pip install [PII]\" }, \"line_index\" : 0 , \"location\" : \"INPUT\" , \"character_start_index\" : 14 , \"character_end_index\" : 19 , \"details\" : null } ] } ] }, { \"path\" : \"nbdefense-demo/Untitled.ipynb\" , \"issues\" : [] }, { \"path\" : \"nbdefense-demo/notebook_2.ipynb\" , \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"location\" : \"INPUT\" , \"details\" : { \"description\" : \"A total of 2 PII found in cell number 11\" , \"summary_field\" : { \"PERSON\" : 2 } }, \"issues\" : [ { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"line_index\" : 2 , \"location\" : \"INPUT\" , \"character_start_index\" : 7 , \"character_end_index\" : 21 , \"details\" : null }, { \"code\" : \"PII_FOUND\" , \"severity\" : \"HIGH\" , \"cell\" : { \"cell_index\" : 11 , \"cell_type\" : \"SOURCE\" , \"scrubbed_content\" : \"print(name)\\nprint('another line')\\nprint('[PII] changed cell')\\n'[PII]'\" }, \"line_index\" : 3 , \"location\" : \"INPUT\" , \"character_start_index\" : 1 , \"character_end_index\" : 14 , \"details\" : null } ] }, { \"code\" : \"SECRETS\" , \"severity\" : \"CRITICAL\" , \"cell\" : { \"cell_index\" : 8 , \"cell_type\" : \"MARKDOWN\" , \"scrubbed_content\" : \"### aws_access_key_id=\\\"AK..6C\\\"\\n\\n\\n\\n\\nsixth line\" }, \"line_index\" : 0 , \"location\" : \"INPUT\" , \"character_start_index\" : 23 , \"character_end_index\" : 43 , \"details\" : { \"description\" : \"AWS Access Key\" , \"summary_field\" : null } } ] } ], \"errors\" : [ { \"error_type\" : \"SCAN\" , \"plugin_name\" : \"PII Plugin\" , \"message\" : \"error message\" } ] }","title":"The JSON Report"},{"location":"getting-started/cli/#the-root-element","text":"This is the PATH that was passed to the nbdefense scan PATH command. { \"root\" : \"nbdefense-demo\" , ... }","title":"The root element"},{"location":"getting-started/cli/#the-root_issues-element","text":"Contains all of the issues related to the dependency file. This includes any CVEs or license issues. { ... , \"root_issues\" : [ { ISSUE_CONTENTS } ], ... }","title":"The root_issues element"},{"location":"getting-started/cli/#the-plugins-element","text":"An array containing the plugins that were run in the scan. Also includes the settings for the plugins. { ... , \"plugins\" : [ { PLUGIN_SETTINGS } ], ... }","title":"The plugins element"},{"location":"getting-started/cli/#the-notebooks-element","text":"The list of notebooks included in this scan. { ... , \"notebooks\" : [ \"nbdefense-demo/notebook_1.ipynb\" ], ... }","title":"The notebooks element"},{"location":"getting-started/cli/#the-notebook_issues-element","text":"A list of objects containing paths and issues for each notebook. { ... , \"notebook_issues\" : [ { \"path\" : \"nbdefense-demo/notebook_1.ipynb\" , \"issues\" : [ { ISSUE_CONTENTS } ] } ], ... }","title":"The notebook_issues element"},{"location":"getting-started/cli/#the-errors-element","text":"A list of the errors that occurred during the scan. This element will only be included if at least one error occurs during the scan. { ... , \"errors\" : [ { ERROR_CONTENTS } ], ... }","title":"The errors element"},{"location":"getting-started/cli/#adjusting-scan-settings","text":"You can change and update settings for your scan from a settings.toml file. More info is available on the Scan Settings page.","title":"Adjusting Scan Settings"},{"location":"getting-started/jupyter-lab-extension/","text":"Installation Running NB Defense on JupyterLab in the cloud The following instructions are for a local installation of JupyterLab. If you are interested in running the JupyterLab Extension on a cloud platform, please visit the JupyterLab Extension on Cloud Services page for instructions for each platform. Activate the Python environment that you use to run JupyterLab. Supported JupyterLab Versions The NB Defense JupyterLab extension works with versions of JupyterLab >=3 and <4. Install the extension with pip: pip install nbdefense_jupyter (Optional) Install the Spacy model for PII detection with: python -m spacy download en_core_web_trf Spacy model download This is required for the PII plugin to operate. If you do not install the en_core_web_trf model, then you will get the following error message in the scan output with the PII plugin activated: Error occurred in the scan portion of the PII Plugin plugin. Message: [E050] Can't find model 'en_core_web_trf'. It doesn't seem to be a Python package or a valid path to a data directory. Activate the server extension with: jupyter server extension enable nbdefense_jupyter Start (or restart) the JupyterLab session and the NB Defense extension should be ready to go! You will know the extension has been installed successfully if you are able to see the new NB Defense tab and the Scan with NB Defense button in the toolbar. jupyter lab Usage Once the extension has been installed, you can now start scanning your notebooks within the JupyterLab environment. Installing the NB Defense JupyterLab Extension (JLE) will add a tab with an NB icon to your side bar. Clicking this will take you to the NB Defense JLE panel. From there you can run a scan or view scan results for the currently focused notebook. Open NB Defense panel video You can also run a scan by clicking the Scan with NB Defense button in the notebook toolbar. Run a scan from the toolbar video Interpreting Scan Results Within the side panel we display a list of issues detected during the scan. The information on the side bar includes the \"Issue type\", a short description of the issue, and which cell index the issue was found in. Clicking on one of the issues here will focus the relevant cell. From here you can see that the characters that triggered the scan will be underlined in the editor. Additionally, all of the cells that contain issues will have a red background. Focus cell from issue video Adjusting Scan Settings You can change and update settings for your scan from the JupyterLab settings menu. More info is available on the Scan Settings page.","title":"JupyterLab Extension"},{"location":"getting-started/jupyter-lab-extension/#installation","text":"Running NB Defense on JupyterLab in the cloud The following instructions are for a local installation of JupyterLab. If you are interested in running the JupyterLab Extension on a cloud platform, please visit the JupyterLab Extension on Cloud Services page for instructions for each platform. Activate the Python environment that you use to run JupyterLab. Supported JupyterLab Versions The NB Defense JupyterLab extension works with versions of JupyterLab >=3 and <4. Install the extension with pip: pip install nbdefense_jupyter (Optional) Install the Spacy model for PII detection with: python -m spacy download en_core_web_trf Spacy model download This is required for the PII plugin to operate. If you do not install the en_core_web_trf model, then you will get the following error message in the scan output with the PII plugin activated: Error occurred in the scan portion of the PII Plugin plugin. Message: [E050] Can't find model 'en_core_web_trf'. It doesn't seem to be a Python package or a valid path to a data directory. Activate the server extension with: jupyter server extension enable nbdefense_jupyter Start (or restart) the JupyterLab session and the NB Defense extension should be ready to go! You will know the extension has been installed successfully if you are able to see the new NB Defense tab and the Scan with NB Defense button in the toolbar. jupyter lab","title":"Installation"},{"location":"getting-started/jupyter-lab-extension/#usage","text":"Once the extension has been installed, you can now start scanning your notebooks within the JupyterLab environment. Installing the NB Defense JupyterLab Extension (JLE) will add a tab with an NB icon to your side bar. Clicking this will take you to the NB Defense JLE panel. From there you can run a scan or view scan results for the currently focused notebook. Open NB Defense panel video You can also run a scan by clicking the Scan with NB Defense button in the notebook toolbar. Run a scan from the toolbar video","title":"Usage"},{"location":"getting-started/jupyter-lab-extension/#interpreting-scan-results","text":"Within the side panel we display a list of issues detected during the scan. The information on the side bar includes the \"Issue type\", a short description of the issue, and which cell index the issue was found in. Clicking on one of the issues here will focus the relevant cell. From here you can see that the characters that triggered the scan will be underlined in the editor. Additionally, all of the cells that contain issues will have a red background. Focus cell from issue video","title":"Interpreting Scan Results"},{"location":"getting-started/jupyter-lab-extension/#adjusting-scan-settings","text":"You can change and update settings for your scan from the JupyterLab settings menu. More info is available on the Scan Settings page.","title":"Adjusting Scan Settings"},{"location":"getting-started/cloud-services/","text":"JupyterLab Extension on Cloud Services This page gives an overall account of installing NB Defense JupyterLab Extension (JLE) on different cloud platforms. Overall, the following four steps outline the installation of the JLE: Choose the conda environment in which JLE is to be installed. conda activate ENVIRONMENT_NAME Install the JLE using pip install command: pip install nbdefense_jupyter Enable the JLE using: jupyter server extension enable nbdefense_jupyter Restart the JupyterLab server with the platform specific restart command/sequence. Please note that step 2 and step 3 will be the same on all cloud platforms, whereas step 1 and step 4 will change depending on the cloud platform. Please follow the links for the following cloud platforms to learn more about their specific JLE installation steps: SageMaker Notebooks SageMaker Studio Labs Azure Machine Learning Studio Unsupported Cloud Platforms: The NB Defense JLE will not work on the following cloud platforms: Oracle Cloud Infrastructure (OCI): The Jupyter version running on OCI is 2.2.10 whereas the NB Defense JLE works on Jupyter version 3. Google Cloud Platform (GCP): The GCP does not support third party JupyterLab extensions for both managed notebooks , and user-managed notebooks . Other Cloud Platforms? If you are trying to install NB Defense JLE on a cloud platform for which the installation instructions are not listed, you are welcome to open a ticket, or a PR here .","title":"JupyterLab Extension on Cloud Services"},{"location":"getting-started/cloud-services/#jupyterlab-extension-on-cloud-services","text":"This page gives an overall account of installing NB Defense JupyterLab Extension (JLE) on different cloud platforms. Overall, the following four steps outline the installation of the JLE: Choose the conda environment in which JLE is to be installed. conda activate ENVIRONMENT_NAME Install the JLE using pip install command: pip install nbdefense_jupyter Enable the JLE using: jupyter server extension enable nbdefense_jupyter Restart the JupyterLab server with the platform specific restart command/sequence. Please note that step 2 and step 3 will be the same on all cloud platforms, whereas step 1 and step 4 will change depending on the cloud platform. Please follow the links for the following cloud platforms to learn more about their specific JLE installation steps: SageMaker Notebooks SageMaker Studio Labs Azure Machine Learning Studio","title":"JupyterLab Extension on Cloud Services"},{"location":"getting-started/cloud-services/#unsupported-cloud-platforms","text":"The NB Defense JLE will not work on the following cloud platforms: Oracle Cloud Infrastructure (OCI): The Jupyter version running on OCI is 2.2.10 whereas the NB Defense JLE works on Jupyter version 3. Google Cloud Platform (GCP): The GCP does not support third party JupyterLab extensions for both managed notebooks , and user-managed notebooks .","title":"Unsupported Cloud Platforms:"},{"location":"getting-started/cloud-services/#other-cloud-platforms","text":"If you are trying to install NB Defense JLE on a cloud platform for which the installation instructions are not listed, you are welcome to open a ticket, or a PR here .","title":"Other Cloud Platforms?"},{"location":"getting-started/cloud-services/azure-ml-notebooks/","text":"Configuring NB Defense for Azure ML Notebooks This section outlines the steps for installation of NB Defense in Azure Machine Learning Studio . Open the notebook you want to scan in JupyterLab by accessing the Editor menu as shown below: Open jupyter notebook in JupyterLab using Azure Machine Learning Studio. From JupyterLab, open a new terminal. Activate jupyter_env environment using the following command: conda activate jupyter_env The JLE can now be installed using the following command: pip install nbdefense_jupyter Once NB Defense is installed, enable the extension using the following command: jupyter server extension enable nbdefense_jupyter Optionally you can also run: jupyter lab extension list to ensure the extension is enlisted. The above two commands should give an output similar to the one below: both commands list nbdefense_jupyter . Enabling the NBDefense JupyterLab Extension (JLE) in Azure Machine Learning Studio. Restart the jupyter server using: sudo systemctl restart jupyter and refresh the browser. This should show the NB Defense widget installed in the left menu: Refresh the JupyterLab webpage (CMD+R on a Mac or CTRL+R on a Windows machine). You should now be able to see the NBDefense JLE widget on the left hand side of the JupyterLab UI. Successful installation of NB Defense JupyterLab Extension (JLE) in Azure Machine Learning Studio. That is it! You can now log in, and press the scan button and see if there are any issues in your notebook as outlined by the NB Defense scan. For example, in the notebook below NB Defense scan has found some personally identifiable information (PII) (note the PII is fake). NB Defense Jupyter Lab Extension (JLE) scan results using Azure Machine Learning Studio. Please note that plugin specific settings may not work on notebooks running in Azure Machine Learning Studio.","title":"Azure ML Notebooks"},{"location":"getting-started/cloud-services/azure-ml-notebooks/#configuring-nb-defense-for-azure-ml-notebooks","text":"This section outlines the steps for installation of NB Defense in Azure Machine Learning Studio . Open the notebook you want to scan in JupyterLab by accessing the Editor menu as shown below: Open jupyter notebook in JupyterLab using Azure Machine Learning Studio. From JupyterLab, open a new terminal. Activate jupyter_env environment using the following command: conda activate jupyter_env The JLE can now be installed using the following command: pip install nbdefense_jupyter Once NB Defense is installed, enable the extension using the following command: jupyter server extension enable nbdefense_jupyter Optionally you can also run: jupyter lab extension list to ensure the extension is enlisted. The above two commands should give an output similar to the one below: both commands list nbdefense_jupyter . Enabling the NBDefense JupyterLab Extension (JLE) in Azure Machine Learning Studio. Restart the jupyter server using: sudo systemctl restart jupyter and refresh the browser. This should show the NB Defense widget installed in the left menu: Refresh the JupyterLab webpage (CMD+R on a Mac or CTRL+R on a Windows machine). You should now be able to see the NBDefense JLE widget on the left hand side of the JupyterLab UI. Successful installation of NB Defense JupyterLab Extension (JLE) in Azure Machine Learning Studio. That is it! You can now log in, and press the scan button and see if there are any issues in your notebook as outlined by the NB Defense scan. For example, in the notebook below NB Defense scan has found some personally identifiable information (PII) (note the PII is fake). NB Defense Jupyter Lab Extension (JLE) scan results using Azure Machine Learning Studio. Please note that plugin specific settings may not work on notebooks running in Azure Machine Learning Studio.","title":"Configuring NB Defense for Azure ML Notebooks"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/","text":"Configuring NB Defense for SageMaker Notebook Instances JupyterLab Extension (JLE) Installation Select the \u201cOpen JupyterLab\u201d option when your sagemaker notebook has been provisioned. Note: NB Defense JLE requires JupyterLab 3. When JupyterLab opens, select \u201cTerminal\u201d to open a new terminal. When the terminal is open, type the following command to view all conda environments present on the sagemaker instance: conda info --envs You should get output similar to this: The asterisk next to an environment indicates the current (default) active environment - for sagemaker notebooks, the default active environment is always JupyterSystemEnv This is where you want to install the NB Defense JLE. Install the extension with pip: pip install nbdefense_jupyter After the installation is complete, type the following into the terminal: jupyter server extension enable nbdefense_jupyter Now that we have installed and enabled the JLE we simply need to restart the Jupyter Server with the following command: sudo systemctl restart jupyter-server The above command will cause you to lose connection to your terminal. The terminal window will automatically close - this is expected behavior due to the Jupyter Server restarting. You will be taken back to the main page of the Sagemaker JupyterLab UI. To confirm that installation was succesful, open a new terminal and run the following commands: jupyter labextension list # view installed extensions on the client jupyter server extension list # view installed extensions on the server You should see something like the following (notice how nbdefense_jupyter is present in both lists): You can now close the terminal and refresh your JupyterLab webpage (CMD+R on a Mac or CTRL+R on a Windows machine). The NBDefense JLE widget should appear on the left hand side of the JupyterLab UI: You can now start scanning with the NB Defense JLE! SageMaker Lifecycle Policies When using Sagemaker, configurations to the shipped kernels are not persisted between \u2018start\u2019 and \u2018stop\u2019 cycles of the notebook. As such, between each \u2018starting\u2019 and \u2018stopping\u2019 of the notebook, NB Defense JLE will not be present in the kernel you may have previously installed it in. More information on this can be found here. In order to prevent having to re-install and configure NB Defense each time you \u2018start\u2019 and \u2018stop\u2019 a sagemaker instance, we can utilize a Lifecycle Policy. Lifecycle policies will allow for the automatic installation, configuration and persistence of installed libraries and JupyterLab extensions between every \u2018start\u2019 and \u2018stop\u2019 cycle. For the JLE you will need to provide an on-start.sh script as a lifecycle policy. Below is a version of the on-start.sh script that installs the JLE: #!/bin/bash set -e # OVERVIEW # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures that these custom environments are available as kernels in Jupyter. # The on-start script uses the custom conda environment created in the on-create script and uses the ipykernel package to add that as a kernel in Jupyter. # For another example, see: # https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment sudo -u ec2-user -i <<'EOF' unset SUDO_UID source /home/ec2-user/anaconda3/bin/activate JupyterSystemEnv # Don't forget to add your license key pip install nbdefense_jupyter --extra-index-url https://license:{LICENSE_KEY}@api.keygen.sh/v1/accounts/protectai/artifacts jupyter server extension enable nbdefense_jupyter source /home/ec2-user/anaconda3/bin/deactivate # Optionally, uncomment these lines to disable SageMaker-provided Conda functionality. # echo \"c.EnvironmentKernelSpecManager.use_conda_directly = False\" >> /home/ec2-user/.jupyter/jupyter_notebook_config.py # rm /home/ec2-user/.condarc EOF echo \"Restarting the Jupyter server..\" # restart command is dependent on current running Amazon Linux and JupyterLab CURR_VERSION_AL = $( cat /etc/system-release ) CURR_VERSION_JS = $( jupyter --version ) if [[ $CURR_VERSION_JS == * $\"jupyter_core : 4.9.1\" * ]] && [[ $CURR_VERSION_AL == * $\" release 2018\" * ]] ; then sudo initctl restart jupyter-server --no-wait else sudo systemctl --no-block restart jupyter-server.service fi The above script can be customized to alter the name of the custom environment as well as the directory created that hosts the environment. This script does the following: Installs the JupyterLab Extension in the JupyterSystemEnv environment Enables the NB Defense JLE Restarts the Jupyter Server so that the changes are reflected. Common Installation Issues Here are some of the known issues when installing JLE on SageMaker Notebooks. The nbdefense-jupyter server extension fails to enable because of a jsonschema version conflict There are dependency conflicts being shipped by Sagemaker Notebooks out of the box (at the time of this writing) with the jsonschema package. This error may manifest as jupyterlab-server 2.19.0 requires jsonschema>=4.17.3, but you have jsonschema 3.2.0 which is incompatible. Consequently, when running the command to enable the nbdefense-jupyter extension, it will give an error that there is no module named jsonschema.protocols : Traceback (most recent call last): File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server/extension/manager.py\", line 175, in _validate_name self._module, self._metadata = get_metadata(name) File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server/extension/utils.py\", line 55, in get_metadata module = importlib.import_module(package_name) File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/importlib/__init__.py\", line 127, in import_module return _bootstrap._gcd_import(name[level:], package, level) File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server_fileid/__init__.py\", line 2, in <module> from .extension import FileIdExtension File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server_fileid/extension.py\", line 1, in <module> from jupyter_events.logger import EventLogger File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/__init__.py\", line 3, in <module> from .logger import EVENTS_METADATA_VERSION, EventLogger File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/logger.py\", line 19, in <module> from .schema_registry import SchemaRegistry File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/schema_registry.py\", line 3, in <module> from .schema import EventSchema File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/schema.py\", line 6, in <module> from jsonschema.protocols import Validator ModuleNotFoundError: No module named 'jsonschema.protocols' One way to get around this issue is to install a jsonschema version greater than 4.0.0 using: pip install \"jsonschema>4\" If you are still having trouble installing the JLE on SageMaker Notebook, please feel free to reach out to us at support@protectai.com .","title":"SageMaker Notebook Instances"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/#configuring-nb-defense-for-sagemaker-notebook-instances","text":"","title":"Configuring NB Defense for SageMaker Notebook Instances"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/#jupyterlab-extension-jle-installation","text":"Select the \u201cOpen JupyterLab\u201d option when your sagemaker notebook has been provisioned. Note: NB Defense JLE requires JupyterLab 3. When JupyterLab opens, select \u201cTerminal\u201d to open a new terminal. When the terminal is open, type the following command to view all conda environments present on the sagemaker instance: conda info --envs You should get output similar to this: The asterisk next to an environment indicates the current (default) active environment - for sagemaker notebooks, the default active environment is always JupyterSystemEnv This is where you want to install the NB Defense JLE. Install the extension with pip: pip install nbdefense_jupyter After the installation is complete, type the following into the terminal: jupyter server extension enable nbdefense_jupyter Now that we have installed and enabled the JLE we simply need to restart the Jupyter Server with the following command: sudo systemctl restart jupyter-server The above command will cause you to lose connection to your terminal. The terminal window will automatically close - this is expected behavior due to the Jupyter Server restarting. You will be taken back to the main page of the Sagemaker JupyterLab UI. To confirm that installation was succesful, open a new terminal and run the following commands: jupyter labextension list # view installed extensions on the client jupyter server extension list # view installed extensions on the server You should see something like the following (notice how nbdefense_jupyter is present in both lists): You can now close the terminal and refresh your JupyterLab webpage (CMD+R on a Mac or CTRL+R on a Windows machine). The NBDefense JLE widget should appear on the left hand side of the JupyterLab UI: You can now start scanning with the NB Defense JLE!","title":"JupyterLab Extension (JLE) Installation"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/#sagemaker-lifecycle-policies","text":"When using Sagemaker, configurations to the shipped kernels are not persisted between \u2018start\u2019 and \u2018stop\u2019 cycles of the notebook. As such, between each \u2018starting\u2019 and \u2018stopping\u2019 of the notebook, NB Defense JLE will not be present in the kernel you may have previously installed it in. More information on this can be found here. In order to prevent having to re-install and configure NB Defense each time you \u2018start\u2019 and \u2018stop\u2019 a sagemaker instance, we can utilize a Lifecycle Policy. Lifecycle policies will allow for the automatic installation, configuration and persistence of installed libraries and JupyterLab extensions between every \u2018start\u2019 and \u2018stop\u2019 cycle. For the JLE you will need to provide an on-start.sh script as a lifecycle policy. Below is a version of the on-start.sh script that installs the JLE: #!/bin/bash set -e # OVERVIEW # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures that these custom environments are available as kernels in Jupyter. # The on-start script uses the custom conda environment created in the on-create script and uses the ipykernel package to add that as a kernel in Jupyter. # For another example, see: # https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment sudo -u ec2-user -i <<'EOF' unset SUDO_UID source /home/ec2-user/anaconda3/bin/activate JupyterSystemEnv # Don't forget to add your license key pip install nbdefense_jupyter --extra-index-url https://license:{LICENSE_KEY}@api.keygen.sh/v1/accounts/protectai/artifacts jupyter server extension enable nbdefense_jupyter source /home/ec2-user/anaconda3/bin/deactivate # Optionally, uncomment these lines to disable SageMaker-provided Conda functionality. # echo \"c.EnvironmentKernelSpecManager.use_conda_directly = False\" >> /home/ec2-user/.jupyter/jupyter_notebook_config.py # rm /home/ec2-user/.condarc EOF echo \"Restarting the Jupyter server..\" # restart command is dependent on current running Amazon Linux and JupyterLab CURR_VERSION_AL = $( cat /etc/system-release ) CURR_VERSION_JS = $( jupyter --version ) if [[ $CURR_VERSION_JS == * $\"jupyter_core : 4.9.1\" * ]] && [[ $CURR_VERSION_AL == * $\" release 2018\" * ]] ; then sudo initctl restart jupyter-server --no-wait else sudo systemctl --no-block restart jupyter-server.service fi The above script can be customized to alter the name of the custom environment as well as the directory created that hosts the environment. This script does the following: Installs the JupyterLab Extension in the JupyterSystemEnv environment Enables the NB Defense JLE Restarts the Jupyter Server so that the changes are reflected.","title":"SageMaker Lifecycle Policies"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/#common-installation-issues","text":"Here are some of the known issues when installing JLE on SageMaker Notebooks.","title":"Common Installation Issues"},{"location":"getting-started/cloud-services/sage-maker-notebook-instances/#the-nbdefense-jupyter-server-extension-fails-to-enable-because-of-a-jsonschema-version-conflict","text":"There are dependency conflicts being shipped by Sagemaker Notebooks out of the box (at the time of this writing) with the jsonschema package. This error may manifest as jupyterlab-server 2.19.0 requires jsonschema>=4.17.3, but you have jsonschema 3.2.0 which is incompatible. Consequently, when running the command to enable the nbdefense-jupyter extension, it will give an error that there is no module named jsonschema.protocols : Traceback (most recent call last): File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server/extension/manager.py\", line 175, in _validate_name self._module, self._metadata = get_metadata(name) File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server/extension/utils.py\", line 55, in get_metadata module = importlib.import_module(package_name) File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/importlib/__init__.py\", line 127, in import_module return _bootstrap._gcd_import(name[level:], package, level) File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server_fileid/__init__.py\", line 2, in <module> from .extension import FileIdExtension File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_server_fileid/extension.py\", line 1, in <module> from jupyter_events.logger import EventLogger File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/__init__.py\", line 3, in <module> from .logger import EVENTS_METADATA_VERSION, EventLogger File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/logger.py\", line 19, in <module> from .schema_registry import SchemaRegistry File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/schema_registry.py\", line 3, in <module> from .schema import EventSchema File \"/home/ec2-user/anaconda3/envs/JupyterSystemEnv/lib/python3.7/site-packages/jupyter_events/schema.py\", line 6, in <module> from jsonschema.protocols import Validator ModuleNotFoundError: No module named 'jsonschema.protocols' One way to get around this issue is to install a jsonschema version greater than 4.0.0 using: pip install \"jsonschema>4\" If you are still having trouble installing the JLE on SageMaker Notebook, please feel free to reach out to us at support@protectai.com .","title":"The nbdefense-jupyter server extension fails to enable because of a jsonschema version conflict"},{"location":"getting-started/cloud-services/sage-maker-studio-lab/","text":"Configuring NB Defense for SageMaker Studio Lab This section covers the installation of NB Defense on SageMaker Studio Lab Open a terminal session within SageMaker Studio Lab Activate the studiolab environment by running: conda activate studiolab Install the extension with pip (please ensure to replace your license key with {LICENSE_KEY} or get your pre-filled link from the NB Defense web portal ): pip install nbdefense_jupyter Enable the server extension with jupyter server extension enable nbdefense_jupyter Go to the Studio Lab project overview page. Select Stop runtime. Select Start runtime. Reopen the JupyterLab session with the \"Open project\" button and the NB Defense extension should be there. Need more help? More details about how to manage your SageMaker Studio Lab environment can be found in the official documentation","title":"Sage Maker Studio Lab"},{"location":"getting-started/cloud-services/sage-maker-studio-lab/#configuring-nb-defense-for-sagemaker-studio-lab","text":"This section covers the installation of NB Defense on SageMaker Studio Lab Open a terminal session within SageMaker Studio Lab Activate the studiolab environment by running: conda activate studiolab Install the extension with pip (please ensure to replace your license key with {LICENSE_KEY} or get your pre-filled link from the NB Defense web portal ): pip install nbdefense_jupyter Enable the server extension with jupyter server extension enable nbdefense_jupyter Go to the Studio Lab project overview page. Select Stop runtime. Select Start runtime. Reopen the JupyterLab session with the \"Open project\" button and the NB Defense extension should be there.","title":"Configuring NB Defense for SageMaker Studio Lab"},{"location":"getting-started/cloud-services/sage-maker-studio-lab/#need-more-help","text":"More details about how to manage your SageMaker Studio Lab environment can be found in the official documentation","title":"Need more help?"},{"location":"getting-started/cloud-services/sage-maker-studio/","text":"Configuring NB Defense on SageMaker Studio Coming Soon \ud83d\udea7","title":"SageMaker Studio - COMING SOON"},{"location":"getting-started/cloud-services/sage-maker-studio/#configuring-nb-defense-on-sagemaker-studio","text":"","title":"Configuring NB Defense on SageMaker Studio"},{"location":"getting-started/cloud-services/sage-maker-studio/#coming-soon","text":"","title":"Coming Soon \ud83d\udea7"},{"location":"scan-settings/","text":"Scan Settings Settings for scans can be adjusted for both the JupyterLab Extension and the CLI . Adjustable Settings Each of the four NB Defense plugins (secrets, PII, licences, CVE) can be switched on or off. That is, if only the PII plugin is disabled and the remaining three plugins are enabled, the NB Defense scan will scan for the three enabled plugins but will not scan for PII. In addition to enable/disable the available plugins for NB Defense scan, there is a global adjustable setting of redact_secret for presenting sensitive information in scan reports. Moreover, NB Defense also allows for individual settings for each of the four plugins. The global and individual plugin settings are described below: Global Settings redact_secret The redact_secret setting determines how sensitive information is presented in NB Defense scan reports. The possible values of redact_secret are PARTIAL , ALL , and HASH . PARTIAL will show only leading and trailing characters. ALL will shadow the full secret. HASH will replace the full secret with its hashed value (as shown in the table below as well). Redacted Secret Option Redacted Secret PARTIAL 4aed****78$ ALL **** * HASH h3hb54i109k Secrets Plugin Settings secrets_plugins The secrets_plugins has the same modules as in the detect-secrets package. Each of the secret modules can be enable or disabled. More details on which of the secret modules are enabled by default, and what they detect can be found on the secrets scan details page . PII Plugin Settings confidence_threshold The confidence_threshold indicates the level of uncertainty allowed when flagging text as PII i.e., a confidence threshold set at 0.8 would only allow that text marked as PII when NB Defense's PII scan is at least 80% confident that the text is PII. For any other text where the confidence of the NB Defense's PII scan is less than 80% the text will not be marked as PII. The default value of confidence_threshold is set at 0.8 with a minimum allowed value of 0.0 and a maximum allowed value of 1.0 . Also, NB Defense PII scan allows for separate setting of confidence_threshold for each of the PII entities. In this way, by adjusting the values of confidence_threshold for each PII entity separately, the users of NB Defense can set the uncertainty in PII scan results for each of the PII entities independently. entities The PII entities to be scanned for can be toggled on and off in the scan settings. A list of PII entities with their brief description can be found on the PII scan details page . License Plugin Settings accepted_licenses The licenses added to accepted_licenses setting will not be flagged in the NB Defense scan report. So, for example, if the following licenses are added to the accepted_licences , and they appear in the text, NB Defense License plugin will not flag it. accepted_licenses = [\"Apache License 2.0\", \"BSD-3-Clause\", \"MIT License\"] CVE Plugin Settings There are no settings specific to the CVE plugin.","title":"Scan Settings"},{"location":"scan-settings/#scan-settings","text":"Settings for scans can be adjusted for both the JupyterLab Extension and the CLI .","title":"Scan Settings"},{"location":"scan-settings/#adjustable-settings","text":"Each of the four NB Defense plugins (secrets, PII, licences, CVE) can be switched on or off. That is, if only the PII plugin is disabled and the remaining three plugins are enabled, the NB Defense scan will scan for the three enabled plugins but will not scan for PII. In addition to enable/disable the available plugins for NB Defense scan, there is a global adjustable setting of redact_secret for presenting sensitive information in scan reports. Moreover, NB Defense also allows for individual settings for each of the four plugins. The global and individual plugin settings are described below:","title":"Adjustable Settings"},{"location":"scan-settings/#global-settings","text":"","title":"Global Settings"},{"location":"scan-settings/#redact_secret","text":"The redact_secret setting determines how sensitive information is presented in NB Defense scan reports. The possible values of redact_secret are PARTIAL , ALL , and HASH . PARTIAL will show only leading and trailing characters. ALL will shadow the full secret. HASH will replace the full secret with its hashed value (as shown in the table below as well). Redacted Secret Option Redacted Secret PARTIAL 4aed****78$ ALL **** * HASH h3hb54i109k","title":"redact_secret"},{"location":"scan-settings/#secrets-plugin-settings","text":"","title":"Secrets Plugin Settings"},{"location":"scan-settings/#secrets_plugins","text":"The secrets_plugins has the same modules as in the detect-secrets package. Each of the secret modules can be enable or disabled. More details on which of the secret modules are enabled by default, and what they detect can be found on the secrets scan details page .","title":"secrets_plugins"},{"location":"scan-settings/#pii-plugin-settings","text":"","title":"PII Plugin Settings"},{"location":"scan-settings/#confidence_threshold","text":"The confidence_threshold indicates the level of uncertainty allowed when flagging text as PII i.e., a confidence threshold set at 0.8 would only allow that text marked as PII when NB Defense's PII scan is at least 80% confident that the text is PII. For any other text where the confidence of the NB Defense's PII scan is less than 80% the text will not be marked as PII. The default value of confidence_threshold is set at 0.8 with a minimum allowed value of 0.0 and a maximum allowed value of 1.0 . Also, NB Defense PII scan allows for separate setting of confidence_threshold for each of the PII entities. In this way, by adjusting the values of confidence_threshold for each PII entity separately, the users of NB Defense can set the uncertainty in PII scan results for each of the PII entities independently.","title":"confidence_threshold"},{"location":"scan-settings/#entities","text":"The PII entities to be scanned for can be toggled on and off in the scan settings. A list of PII entities with their brief description can be found on the PII scan details page .","title":"entities"},{"location":"scan-settings/#license-plugin-settings","text":"","title":"License Plugin Settings"},{"location":"scan-settings/#accepted_licenses","text":"The licenses added to accepted_licenses setting will not be flagged in the NB Defense scan report. So, for example, if the following licenses are added to the accepted_licences , and they appear in the text, NB Defense License plugin will not flag it. accepted_licenses = [\"Apache License 2.0\", \"BSD-3-Clause\", \"MIT License\"]","title":"accepted_licenses"},{"location":"scan-settings/#cve-plugin-settings","text":"There are no settings specific to the CVE plugin.","title":"CVE Plugin Settings"},{"location":"scan-settings/cli-flags/","text":"There are various flags that can change the behavior of the CLI. Information about these flags can be found using the nbdefense scan --help command. nbdefense scan --help Usage: nbdefense scan [OPTIONS] [PATH] Scan [PATH] for .ipynb files for potential issues. Options: -r, --recursive Scan all nested directories for .ipynb files. -s, --serve Run an HTTP Server to view the report instead of persisting the report as an html file. -q, --quiet Suppress all output. -d, --dependency-file PATH Specify a requirements.txt file to scan for CVEs and license compatibility. -f, --output-file FILE Specify an output filename for the report. -o, --output-format [json|html] The output format for the report. -y, --yes Bypass all prompts with an affirmative response. --settings-file FILE Specify a settings file to use for the scan. Defaults to [PATH]/settings.toml. --no-progress-bars Hide progress bars, but keep other logging active. --help Show this message and exit.","title":"CLI Flags"},{"location":"scan-settings/cli-settings/","text":"The settings for the NB Defense CLI can be configured using a TOML file. Creating a settings.toml file You can create a settings.toml file using the following CLI command: nbdefense settings create Which creates the following settings.toml file: settings.toml # NB Defense settings file # Redact secrets # Possible values are `PARTIAL`, `ALL`, `HASH` # `PARTIAL` will show only leading and trailing characters. # `ALL` will shadow the full secret. # `HASH` will replace the full secret with its hashed value. redact_secret = \"PARTIAL\" trivy_binary_path = \"\" [plugins] [plugins.\"nbdefense.plugins.SecretsPlugin\"] enabled = true [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SoftlayerDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"StripeDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SendGridDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"NpmDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"KeywordDetector\" keyword_exclude = \"\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"IbmCosHmacDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"DiscordBotTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"BasicAuthDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"AzureStorageKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"ArtifactoryDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"AWSKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"CloudantDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"GitHubTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"IbmCloudIamDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"JwtTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"MailchimpDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"PrivateKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SlackDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SquareOAuthDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"TwilioKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"Base64HighEntropyString\" limit = 4.5 [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"HexHighEntropyString\" limit = 3.0 [plugins.\"nbdefense.plugins.PIIPlugin\"] enabled = true confidence_threshold = 0.8 [plugins.\"nbdefense.plugins.PIIPlugin\".entities] US_PASSPORT = true AU_MEDICARE = true AU_TFN = true AU_ACN = true AU_ABN = true UK_NHS = true US_SSN = true US_ITIN = true US_DRIVER_LICENSE = true US_BANK_NUMBER = true MEDICAL_LICENSE = true LOCATION = true PHONE_NUMBER = true NRP = true IP_ADDRESS = true EMAIL_ADDRESS = true IBAN_CODE = true CRYPTO = true CREDIT_CARD = true PERSON = true [plugins.\"nbdefense.plugins.LicenseDependencyFilePlugin\"] enabled = true accepted_licenses = [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" ] [plugins.\"nbdefense.plugins.CVEDependencyFilePlugin\"] enabled = true This settings file can be edited and subsequently used by the CLI. If the file is named settings.toml and located in the directory you are scanning, the settings file will be picked up by default. Otherwise the path to the desired settings file can be passed to the scan command with the following syntax: nbdefense scan SCAN_PATH --settings-file SETTINGS_FILE_PATH Replace SCAN_PATH with the directory or file you would like to scan and SETTINGS_FILE_PATH with the path to the settings file you would like to use. CLI Specific Settings trivy_binary_path The trivy_binary_path will override the Trivy default installation/location. This is useful if you are installing the CLI in an environment where egress is limited or unavailable.","title":"CLI Settings"},{"location":"scan-settings/cli-settings/#creating-a-settingstoml-file","text":"You can create a settings.toml file using the following CLI command: nbdefense settings create Which creates the following settings.toml file: settings.toml # NB Defense settings file # Redact secrets # Possible values are `PARTIAL`, `ALL`, `HASH` # `PARTIAL` will show only leading and trailing characters. # `ALL` will shadow the full secret. # `HASH` will replace the full secret with its hashed value. redact_secret = \"PARTIAL\" trivy_binary_path = \"\" [plugins] [plugins.\"nbdefense.plugins.SecretsPlugin\"] enabled = true [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SoftlayerDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"StripeDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SendGridDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"NpmDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"KeywordDetector\" keyword_exclude = \"\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"IbmCosHmacDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"DiscordBotTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"BasicAuthDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"AzureStorageKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"ArtifactoryDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"AWSKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"CloudantDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"GitHubTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"IbmCloudIamDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"JwtTokenDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"MailchimpDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"PrivateKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SlackDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"SquareOAuthDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"TwilioKeyDetector\" [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"Base64HighEntropyString\" limit = 4.5 [[plugins.\"nbdefense.plugins.SecretsPlugin\".secrets_plugins]] name = \"HexHighEntropyString\" limit = 3.0 [plugins.\"nbdefense.plugins.PIIPlugin\"] enabled = true confidence_threshold = 0.8 [plugins.\"nbdefense.plugins.PIIPlugin\".entities] US_PASSPORT = true AU_MEDICARE = true AU_TFN = true AU_ACN = true AU_ABN = true UK_NHS = true US_SSN = true US_ITIN = true US_DRIVER_LICENSE = true US_BANK_NUMBER = true MEDICAL_LICENSE = true LOCATION = true PHONE_NUMBER = true NRP = true IP_ADDRESS = true EMAIL_ADDRESS = true IBAN_CODE = true CRYPTO = true CREDIT_CARD = true PERSON = true [plugins.\"nbdefense.plugins.LicenseDependencyFilePlugin\"] enabled = true accepted_licenses = [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" ] [plugins.\"nbdefense.plugins.CVEDependencyFilePlugin\"] enabled = true This settings file can be edited and subsequently used by the CLI. If the file is named settings.toml and located in the directory you are scanning, the settings file will be picked up by default. Otherwise the path to the desired settings file can be passed to the scan command with the following syntax: nbdefense scan SCAN_PATH --settings-file SETTINGS_FILE_PATH Replace SCAN_PATH with the directory or file you would like to scan and SETTINGS_FILE_PATH with the path to the settings file you would like to use.","title":"Creating a settings.toml file"},{"location":"scan-settings/cli-settings/#cli-specific-settings","text":"","title":"CLI Specific Settings"},{"location":"scan-settings/cli-settings/#trivy_binary_path","text":"The trivy_binary_path will override the Trivy default installation/location. This is useful if you are installing the CLI in an environment where egress is limited or unavailable.","title":"trivy_binary_path"},{"location":"scan-settings/jupyterlab-settings/","text":"The settings for the JupyterLab Extension can be found in the JupyterLab Advanced Settings Editor alongside the settings for other JupyterLab extensions. You can open the JupyterLab settings pane by clicking on the Settings tab in the menu bar, then clicking on the Advanced Settings Editor button. Jupyter settings video JupyterLab Specific Settings There are two settings specific to the JupyterLab Environment. These are also editable through the toggle buttons on the Notebook. Show Contextual Help This toggles the underlining of found issues in the editor as well as the highlighting of certain cell elements. Show contextual help toggle video Show Dropdowns This toggles the dropdowns that appear on hover of cells that have issues. Show dropdowns toggle video","title":"JupyterLab Extension Settings"},{"location":"scan-settings/jupyterlab-settings/#jupyterlab-specific-settings","text":"There are two settings specific to the JupyterLab Environment. These are also editable through the toggle buttons on the Notebook.","title":"JupyterLab Specific Settings"},{"location":"scan-settings/jupyterlab-settings/#show-contextual-help","text":"This toggles the underlining of found issues in the editor as well as the highlighting of certain cell elements. Show contextual help toggle video","title":"Show Contextual Help"},{"location":"scan-settings/jupyterlab-settings/#show-dropdowns","text":"This toggles the dropdowns that appear on hover of cells that have issues. Show dropdowns toggle video","title":"Show Dropdowns"},{"location":"supported-scans/detecting-CVEs/","text":"CVE Detection NB Defense scans for common vulnerabilities and exposures (CVEs) associated with the dependencies in your project's requirements.txt file and your python environment. We evaluate your dependencies with Aqua's Trivy tool to detect any known vulnerabilities. CVE Detection with the JupyterLab Extension (JLE) The NB Defense JupyterLab Extension tracks your notebooks currently configured kernel to scan imported third party dependencies for CVEs. Warning Before you begin, please configure a kernel for the notebook you plan to scan, and install all the third party dependencies neccessary to execute your notebook into the kernel. If the notebooks dependencies are not installed in the kernel and are not imported by the notebook, they will not be scanned. You can check that all dependencies are correctly installed by running the python code in your notebook; if your python code is valid and executes without any errors, all related dependencies should be installed correctly. Before scanning, verify that the kernel in the NB Defense panel matches the kernel that you have configured. When you press scan, NB Defense will gather imported modules from your notebook and link them to third party packages installed in your kernel. The installed version of the package associated with the imported modules will then be scanned for known CVEs. JLE Settings You can enable or disable cve scanning in the JupyterLab extensions settings . JLE Scan Results Once a scan completes, any imported modules with associated CVEs will be added to the report and you will be provided with information about each CVE. The report below includes the CVE ID, the package and version with the issue, along with the fixed version, description, and a url to learn more. NBDefense JupyterLab Extension (JLE) scan report with CVEs found. CVE Detection with the CLI The NBDefense CLI currently supports scanning for CVEs with a python requirements.txt file. A dependency will only be scanned for CVEs if the version is pinned to a specific version number (ei. numpy==1.0.0 and not numpy>=1.0.0 ). CLI Settings Using your settings.toml file you can enable or disable the CVE plugin. Example Settings [plugins.\"nbdefense.plugins.CVEDependencyFilePlugin\"] enabled = true CLI Scan Results The results will provide you with information on what packages have issues, along with information on how to fix the issue. NBDefense CLI scan report with CVEs found.","title":"CVE Detection"},{"location":"supported-scans/detecting-CVEs/#cve-detection","text":"NB Defense scans for common vulnerabilities and exposures (CVEs) associated with the dependencies in your project's requirements.txt file and your python environment. We evaluate your dependencies with Aqua's Trivy tool to detect any known vulnerabilities.","title":"CVE Detection"},{"location":"supported-scans/detecting-CVEs/#cve-detection-with-the-jupyterlab-extension-jle","text":"The NB Defense JupyterLab Extension tracks your notebooks currently configured kernel to scan imported third party dependencies for CVEs. Warning Before you begin, please configure a kernel for the notebook you plan to scan, and install all the third party dependencies neccessary to execute your notebook into the kernel. If the notebooks dependencies are not installed in the kernel and are not imported by the notebook, they will not be scanned. You can check that all dependencies are correctly installed by running the python code in your notebook; if your python code is valid and executes without any errors, all related dependencies should be installed correctly. Before scanning, verify that the kernel in the NB Defense panel matches the kernel that you have configured. When you press scan, NB Defense will gather imported modules from your notebook and link them to third party packages installed in your kernel. The installed version of the package associated with the imported modules will then be scanned for known CVEs.","title":"CVE Detection with the JupyterLab Extension (JLE)"},{"location":"supported-scans/detecting-CVEs/#jle-settings","text":"You can enable or disable cve scanning in the JupyterLab extensions settings .","title":"JLE Settings"},{"location":"supported-scans/detecting-CVEs/#jle-scan-results","text":"Once a scan completes, any imported modules with associated CVEs will be added to the report and you will be provided with information about each CVE. The report below includes the CVE ID, the package and version with the issue, along with the fixed version, description, and a url to learn more. NBDefense JupyterLab Extension (JLE) scan report with CVEs found.","title":"JLE Scan Results"},{"location":"supported-scans/detecting-CVEs/#cve-detection-with-the-cli","text":"The NBDefense CLI currently supports scanning for CVEs with a python requirements.txt file. A dependency will only be scanned for CVEs if the version is pinned to a specific version number (ei. numpy==1.0.0 and not numpy>=1.0.0 ).","title":"CVE Detection with the CLI"},{"location":"supported-scans/detecting-CVEs/#cli-settings","text":"Using your settings.toml file you can enable or disable the CVE plugin. Example Settings [plugins.\"nbdefense.plugins.CVEDependencyFilePlugin\"] enabled = true","title":"CLI Settings"},{"location":"supported-scans/detecting-CVEs/#cli-scan-results","text":"The results will provide you with information on what packages have issues, along with information on how to fix the issue. NBDefense CLI scan report with CVEs found.","title":"CLI Scan Results"},{"location":"supported-scans/detecting-PII/","text":"Personally Identifiable Information (PII) The NB Defense scans for any information that can be used to identify a person i.e., personally identifiable information (PII). It can be their name, location, bank information etc. NB Defense supports both global entities (such as names, email addresses) as well as country-specific entities (such as UK National Health Service (NHS) number). At the moment, the NB Defense PII plugin has support for English language only. The PII analyser is adapted from Miscrosoft Presidio whereas the PII anonymization is handled by NB Defense. Warning Before you begin scanning with the PII plugin, please execute all code inside the notebook you would like scanned. This plugin does not execute code, and will only scan output for PII if it exists in the notebook. PII Entities NB Defense supports the following PII entities: Global PII entities: Global PII Entity Description PERSON If there is a name in a notebook, NB Defense will flag it as \"PERSON\". CREDIT_CARD If there is a number between 12 to 19 digits in a notebook, NB Defense will flag it as \"CREDIT_CARD\". CRYPTO If there is a Bitcoin wallet number in a notebook, NB Defense will flag it as \"CRYPTO\". At the moment, only Bitcoin addresses are supported. EMAIL_ADDRESS If there is an email address in a notebook, NB Defense will flag it as \"EMAIL_ADDRESS\". IBAN_CODE If there is an International Bank Account Number (IBAN) in a notebook, NB Defense will flag it as \"IBAN_CODE\". IP_ADDRESS If there is an Internet Protocol (IP) version 4 or version 6 address in a notebook, NB Defense will flag it as \"IP_ADDRESS\". NRP If there is a mention of a person's nationality, religious or political affiliation (NRP) in a notebook, NB Defense will flag it as \"NRP\". PHONE_NUMBER If there is a telephone number in a notebook, NB Defense will flag it as a \"PHONE_NUMBER\". LOCATION If there is a geographraphically defined location name in a notebook such as a city, province or state name, NB Defense will flag it as \"LOCATION\". MEDICAL_LICENSE If there is a medical license number in a notebook, NB Defense will flag it as a \"MEDICAL_LICENSE\". United States of America (US)-specific PII entities: US-Specific PII Entities Description US_BANK_NUMBER If there is a US bank account number between 8 to 17 digits in a notebook, NB Defense will flag it as \"US_BANK_NUMBER\". US_DRIVER_LICENSE If there is a US driver license number in a notebook, NB Defense will flag it as \"US_DRIVER_LICENSE\". US_ITIN If there is a US Individual Taxpayer Identification Number (ITIN) in a notebook, NB Defense will flag it as \"US_ITIN\". The US ITIN starts with a \"9\" and has a \"7\" or \"8\" as the fourth digit. US_PASSPORT If there is a US passport number in a notebook, NB Defense will flag it as \"US_PASSPORT\". US_SSN If there is a US Social Security Number (SSN) in a notebook, NB Defense will flag it as \"US_SSN\". The US SSN has 9 digits. United Kingdom (UK)-specific PII entities: UK-specific PII Entities Description UK_NHS If there is a UK National Health Service (NHS) number in a notebook, NB Defense will flag it as a \"UK_NHS\". The UK NHS is a 10 digit number. Australia (AU)-specific PII entities: AU-specific PII Entities Description AU_ABN If there is an Australian Bank Number (ABN) in a notebook, NB Defense will flag it as a \"AU_ABN\". The ABN is a 11 digit number. AU_ACN If there is an Australian Company Number (ACN) in a notebook, NB Defense will flag it as a \"AU_ACN\". The AU_ACN is a 9 digit number. AU_TFN If there is an Australian Tax File Number (TFN) in a notbook, NB Defense will flag it as a \"AU_TFN\". AU_MEDICARE If there is an Australian Medicare number in a notbook, NB Defense will flag it as a \"AU_MEDICARE\". PII Scan Results Below is a sample result for JLE with PII found in notebook_2.ipynb NB Defense JupyterLab Extension (JLE) scan report with Personally Identifiable Information (PII) found. For any PII found in the notebook, the scan flags it as a HIGH severity issue, and also includes the cell number where it is found. On clicking on the Issue type: PII will focus the cell where PII is found. Upon hovering over the cell, NB Defense will show the total number of PII found in that cell: (in the sample scan result above) a total of 40 potential PII are found.","title":"PII Detection"},{"location":"supported-scans/detecting-PII/#personally-identifiable-information-pii","text":"The NB Defense scans for any information that can be used to identify a person i.e., personally identifiable information (PII). It can be their name, location, bank information etc. NB Defense supports both global entities (such as names, email addresses) as well as country-specific entities (such as UK National Health Service (NHS) number). At the moment, the NB Defense PII plugin has support for English language only. The PII analyser is adapted from Miscrosoft Presidio whereas the PII anonymization is handled by NB Defense. Warning Before you begin scanning with the PII plugin, please execute all code inside the notebook you would like scanned. This plugin does not execute code, and will only scan output for PII if it exists in the notebook.","title":"Personally Identifiable Information (PII)"},{"location":"supported-scans/detecting-PII/#pii-entities","text":"NB Defense supports the following PII entities:","title":"PII Entities"},{"location":"supported-scans/detecting-PII/#global-pii-entities","text":"Global PII Entity Description PERSON If there is a name in a notebook, NB Defense will flag it as \"PERSON\". CREDIT_CARD If there is a number between 12 to 19 digits in a notebook, NB Defense will flag it as \"CREDIT_CARD\". CRYPTO If there is a Bitcoin wallet number in a notebook, NB Defense will flag it as \"CRYPTO\". At the moment, only Bitcoin addresses are supported. EMAIL_ADDRESS If there is an email address in a notebook, NB Defense will flag it as \"EMAIL_ADDRESS\". IBAN_CODE If there is an International Bank Account Number (IBAN) in a notebook, NB Defense will flag it as \"IBAN_CODE\". IP_ADDRESS If there is an Internet Protocol (IP) version 4 or version 6 address in a notebook, NB Defense will flag it as \"IP_ADDRESS\". NRP If there is a mention of a person's nationality, religious or political affiliation (NRP) in a notebook, NB Defense will flag it as \"NRP\". PHONE_NUMBER If there is a telephone number in a notebook, NB Defense will flag it as a \"PHONE_NUMBER\". LOCATION If there is a geographraphically defined location name in a notebook such as a city, province or state name, NB Defense will flag it as \"LOCATION\". MEDICAL_LICENSE If there is a medical license number in a notebook, NB Defense will flag it as a \"MEDICAL_LICENSE\".","title":"Global PII entities:"},{"location":"supported-scans/detecting-PII/#united-states-of-america-us-specific-pii-entities","text":"US-Specific PII Entities Description US_BANK_NUMBER If there is a US bank account number between 8 to 17 digits in a notebook, NB Defense will flag it as \"US_BANK_NUMBER\". US_DRIVER_LICENSE If there is a US driver license number in a notebook, NB Defense will flag it as \"US_DRIVER_LICENSE\". US_ITIN If there is a US Individual Taxpayer Identification Number (ITIN) in a notebook, NB Defense will flag it as \"US_ITIN\". The US ITIN starts with a \"9\" and has a \"7\" or \"8\" as the fourth digit. US_PASSPORT If there is a US passport number in a notebook, NB Defense will flag it as \"US_PASSPORT\". US_SSN If there is a US Social Security Number (SSN) in a notebook, NB Defense will flag it as \"US_SSN\". The US SSN has 9 digits.","title":"United States of America (US)-specific PII entities:"},{"location":"supported-scans/detecting-PII/#united-kingdom-uk-specific-pii-entities","text":"UK-specific PII Entities Description UK_NHS If there is a UK National Health Service (NHS) number in a notebook, NB Defense will flag it as a \"UK_NHS\". The UK NHS is a 10 digit number.","title":"United Kingdom (UK)-specific PII entities:"},{"location":"supported-scans/detecting-PII/#australia-au-specific-pii-entities","text":"AU-specific PII Entities Description AU_ABN If there is an Australian Bank Number (ABN) in a notebook, NB Defense will flag it as a \"AU_ABN\". The ABN is a 11 digit number. AU_ACN If there is an Australian Company Number (ACN) in a notebook, NB Defense will flag it as a \"AU_ACN\". The AU_ACN is a 9 digit number. AU_TFN If there is an Australian Tax File Number (TFN) in a notbook, NB Defense will flag it as a \"AU_TFN\". AU_MEDICARE If there is an Australian Medicare number in a notbook, NB Defense will flag it as a \"AU_MEDICARE\".","title":"Australia (AU)-specific PII entities:"},{"location":"supported-scans/detecting-PII/#pii-scan-results","text":"Below is a sample result for JLE with PII found in notebook_2.ipynb NB Defense JupyterLab Extension (JLE) scan report with Personally Identifiable Information (PII) found. For any PII found in the notebook, the scan flags it as a HIGH severity issue, and also includes the cell number where it is found. On clicking on the Issue type: PII will focus the cell where PII is found. Upon hovering over the cell, NB Defense will show the total number of PII found in that cell: (in the sample scan result above) a total of 40 potential PII are found.","title":"PII Scan Results"},{"location":"supported-scans/detecting-licenses/","text":"License Detection NB Defense scans for common vulnerabilities and exposures (CVEs) associated with the dependencies in your project's requirements.txt file and your python environment. We evaluate your dependencies for licenses that are not included in your list of accepted licenses. License Detection with the JupyterLab Extension (JLE) The NB Defense JupyterLab Extension tracks your notebooks currently configured kernel to scan imported third party dependencies for licenses. Warning Before you begin, please configure a kernel for the notebook you plan to scan, and install all the third party dependencies neccessary to execute your notebook into the kernel. If the notebooks dependencies are not installed in the kernel and are not imported by the notebook, they will not be scanned. You can check that all dependencies are correctly installed by running the python code in your notebook; if your python code is valid and executes without any errors, all related dependencies should be installed correctly. Before scanning, verify that the kernel in the NB Defense panel matches the kernel that you have configured. When you press scan, NB Defense will gather imported modules from your notebook and link them to third party packages installed in your kernel. The installed version of the package associated with the imported modules will then be scanned for unapproved licenses. JLE Settings You can configure your list of accepted licenses, and license source in the JupyterLab extensions settings . Configure accepted licenses to include all licenses that are acceptable to your project's standards. Configure the license source to determine where NB Defense will look for license data associated with your package (local kernel, pypi, or a combination of the two). JLE Scan Results The example below shows that an unapproved license has been found in the matplotlibXtns version 20.5 package. NBDefense JupyterLab Extension (JLE) scan report with licenses found. License Detection with the CLI The NBDefense CLI currently supports scanning for licenses using a python requirements.txt file. A dependency will only be scanned for licenses if the version is pinned to a specific version number (ei. numpy==1.0.0 and not numpy>=1.0.0 ). CLI Settings Using your settings.toml file you can configure the list of licenses to include licenses that are acceptable to your projects standards. Example Settings [plugins.\"nbdefense.plugins.LicenseDependencyFilePlugin\"] enabled = true accepted_licenses = [ \"Apache License 2.0\" , \"BSD\" , \"MIT\" , \"Python Software Foundation License\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"Microsoft Public License\" , \"MIT License\" , \"ISC License (ISCL)\" , \"MIT-0\" ] CLI Scan Results The example below surfaces three seperate issues: an unapproved license, a package where a license couldn't be found, and a package that does not have a pinned dependency. NBDefense CLI scan report with licenses found.","title":"License Detection"},{"location":"supported-scans/detecting-licenses/#license-detection","text":"NB Defense scans for common vulnerabilities and exposures (CVEs) associated with the dependencies in your project's requirements.txt file and your python environment. We evaluate your dependencies for licenses that are not included in your list of accepted licenses.","title":"License Detection"},{"location":"supported-scans/detecting-licenses/#license-detection-with-the-jupyterlab-extension-jle","text":"The NB Defense JupyterLab Extension tracks your notebooks currently configured kernel to scan imported third party dependencies for licenses. Warning Before you begin, please configure a kernel for the notebook you plan to scan, and install all the third party dependencies neccessary to execute your notebook into the kernel. If the notebooks dependencies are not installed in the kernel and are not imported by the notebook, they will not be scanned. You can check that all dependencies are correctly installed by running the python code in your notebook; if your python code is valid and executes without any errors, all related dependencies should be installed correctly. Before scanning, verify that the kernel in the NB Defense panel matches the kernel that you have configured. When you press scan, NB Defense will gather imported modules from your notebook and link them to third party packages installed in your kernel. The installed version of the package associated with the imported modules will then be scanned for unapproved licenses.","title":"License Detection with the JupyterLab Extension (JLE)"},{"location":"supported-scans/detecting-licenses/#jle-settings","text":"You can configure your list of accepted licenses, and license source in the JupyterLab extensions settings . Configure accepted licenses to include all licenses that are acceptable to your project's standards. Configure the license source to determine where NB Defense will look for license data associated with your package (local kernel, pypi, or a combination of the two).","title":"JLE Settings"},{"location":"supported-scans/detecting-licenses/#jle-scan-results","text":"The example below shows that an unapproved license has been found in the matplotlibXtns version 20.5 package. NBDefense JupyterLab Extension (JLE) scan report with licenses found.","title":"JLE Scan Results"},{"location":"supported-scans/detecting-licenses/#license-detection-with-the-cli","text":"The NBDefense CLI currently supports scanning for licenses using a python requirements.txt file. A dependency will only be scanned for licenses if the version is pinned to a specific version number (ei. numpy==1.0.0 and not numpy>=1.0.0 ).","title":"License Detection with the CLI"},{"location":"supported-scans/detecting-licenses/#cli-settings","text":"Using your settings.toml file you can configure the list of licenses to include licenses that are acceptable to your projects standards. Example Settings [plugins.\"nbdefense.plugins.LicenseDependencyFilePlugin\"] enabled = true accepted_licenses = [ \"Apache License 2.0\" , \"BSD\" , \"MIT\" , \"Python Software Foundation License\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"Microsoft Public License\" , \"MIT License\" , \"ISC License (ISCL)\" , \"MIT-0\" ]","title":"CLI Settings"},{"location":"supported-scans/detecting-licenses/#cli-scan-results","text":"The example below surfaces three seperate issues: an unapproved license, a package where a license couldn't be found, and a package that does not have a pinned dependency. NBDefense CLI scan report with licenses found.","title":"CLI Scan Results"},{"location":"supported-scans/detecting-secrets/","text":"Secrets Detection NB Defense scans for any secrets or authentication information(such as passwords or tokens) that may be present in a notebook. To enable this we have built a wrapper around Yelp's detect-secrets library, porting its capabilities to check the input and output cells of your notebooks. Warning Before you begin scanning for secrets, please execute all code inside the notebook that you would like scanned. This plugin does not execute code, and will only scan output for secrets if it exists in the notebook. Supported detect-secrets Plugins Following is a list of the different types of authentication information that is scanned for by the NB Defense: API keys and tokens - Application Programming Interface (API) keys and tokens will be detected by NB Defense scan. They are typically used to authenticate a calling program communicating with an API. Amazon Web Services (AWS) key - AWS key is used to gain access to all the AWS resources. Azure storage key - Azure storage key is used to authorize access to data in Azure storage account. Basic authentication - HTTP web browser authentication is usually undertaken using a username and password when making a request such as accessing email. Cloudant detector - The Cloudant detector is a unique identifier for a document in a database. Discord bot token - The Artificial Intelligence (AI) driven bots that can automate tasks for moderating server. GitHub token - GitHub token is an alternative to password when using the GitHub API or the command line for accessing GitHub resources. Base64 High Entropy String - Strings with high entropy that appear to be Base64 encoded. Hex High Entropy String - Strings with high entropy that appear to be in a hexadecimal format. IBM Cloud Identity and Access Management IBM Hash-based Message Authentication Code (HMAC) - IBM HMAC credentials consist of an Access Key and Secret Key paired for use with S3-compatible tools and libraries that require authentication. JSON Web Token - JSON Web Tokens (JWT) are an open, industry standard RFC 7519 method for representing claims securely between two parties. Keywords - Keywords are used for finding tokens and passwords such as 'The password is: * '. The word password is a keyword since it gives context. Mailchimp - Mailchimp is used by marketers for promotional emails. NB Defense detection scans for login information for Mailchimp. Node Package Manager (NPM) - NPM detection scans for login information for NPM. Private Key - Private key detection is used for detecting any private or secret keys that could be used for data encryption. SendGrid - SendGrid is an email marketing provider used for promotional emails. Slack - Slack is a messaging application used by businesses for connecting their team. Softlayer - IBM SoftLayer is a public cloud computing platform that offers a range of services, such as compute, storage, and application development. SquareOAuth - The OAuth allows for sharing of information between services without exposing a password. Stripe - Stripe enables online payment processing for online businesses. Twilio - Twilio is a customer engagement platform which is programmable. Plugin Options There are a few plugins that have their own options: Plugin Option Description Base64HighEntropyString limit Sets the Shannon entropy limit for high entropy strings. Value must be between 0.0 and 8.0, defaults to 4.5. HexHighEntropyString limit Sets the Shannon entropy limit for high entropy strings. Value must be between 0.0 and 8.0, defaults to 3.0. KeywordDetector keyword_exclude Specify a regex string to exclude certain strings from the secrets scan.","title":"Secrets Detection"},{"location":"supported-scans/detecting-secrets/#secrets-detection","text":"NB Defense scans for any secrets or authentication information(such as passwords or tokens) that may be present in a notebook. To enable this we have built a wrapper around Yelp's detect-secrets library, porting its capabilities to check the input and output cells of your notebooks. Warning Before you begin scanning for secrets, please execute all code inside the notebook that you would like scanned. This plugin does not execute code, and will only scan output for secrets if it exists in the notebook.","title":"Secrets Detection"},{"location":"supported-scans/detecting-secrets/#supported-detect-secrets-plugins","text":"Following is a list of the different types of authentication information that is scanned for by the NB Defense: API keys and tokens - Application Programming Interface (API) keys and tokens will be detected by NB Defense scan. They are typically used to authenticate a calling program communicating with an API. Amazon Web Services (AWS) key - AWS key is used to gain access to all the AWS resources. Azure storage key - Azure storage key is used to authorize access to data in Azure storage account. Basic authentication - HTTP web browser authentication is usually undertaken using a username and password when making a request such as accessing email. Cloudant detector - The Cloudant detector is a unique identifier for a document in a database. Discord bot token - The Artificial Intelligence (AI) driven bots that can automate tasks for moderating server. GitHub token - GitHub token is an alternative to password when using the GitHub API or the command line for accessing GitHub resources. Base64 High Entropy String - Strings with high entropy that appear to be Base64 encoded. Hex High Entropy String - Strings with high entropy that appear to be in a hexadecimal format. IBM Cloud Identity and Access Management IBM Hash-based Message Authentication Code (HMAC) - IBM HMAC credentials consist of an Access Key and Secret Key paired for use with S3-compatible tools and libraries that require authentication. JSON Web Token - JSON Web Tokens (JWT) are an open, industry standard RFC 7519 method for representing claims securely between two parties. Keywords - Keywords are used for finding tokens and passwords such as 'The password is: * '. The word password is a keyword since it gives context. Mailchimp - Mailchimp is used by marketers for promotional emails. NB Defense detection scans for login information for Mailchimp. Node Package Manager (NPM) - NPM detection scans for login information for NPM. Private Key - Private key detection is used for detecting any private or secret keys that could be used for data encryption. SendGrid - SendGrid is an email marketing provider used for promotional emails. Slack - Slack is a messaging application used by businesses for connecting their team. Softlayer - IBM SoftLayer is a public cloud computing platform that offers a range of services, such as compute, storage, and application development. SquareOAuth - The OAuth allows for sharing of information between services without exposing a password. Stripe - Stripe enables online payment processing for online businesses. Twilio - Twilio is a customer engagement platform which is programmable.","title":"Supported detect-secrets Plugins"},{"location":"supported-scans/detecting-secrets/#plugin-options","text":"There are a few plugins that have their own options: Plugin Option Description Base64HighEntropyString limit Sets the Shannon entropy limit for high entropy strings. Value must be between 0.0 and 8.0, defaults to 4.5. HexHighEntropyString limit Sets the Shannon entropy limit for high entropy strings. Value must be between 0.0 and 8.0, defaults to 3.0. KeywordDetector keyword_exclude Specify a regex string to exclude certain strings from the secrets scan.","title":"Plugin Options"},{"location":"supported-scans/scanning-dependencies-for-licenses/","text":"Third Party License Validation NB Defense relies on the licensing reporting for packages hosted in PyPI as well as the locally stored copies of these packages where available. We simply parse the license information to determine if it matches licenses that are known to be friendly for commercial usage, specifically: ACCEPTED_LICENSES = [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" , ] More customization coming soon!","title":"Third Party License Validation"},{"location":"supported-scans/scanning-dependencies-for-licenses/#third-party-license-validation","text":"NB Defense relies on the licensing reporting for packages hosted in PyPI as well as the locally stored copies of these packages where available. We simply parse the license information to determine if it matches licenses that are known to be friendly for commercial usage, specifically: ACCEPTED_LICENSES = [ \"Apache License 2.0\" , \"Apache Software License\" , \"Apache 2.0\" , \"Apache-2.0\" , \"BSD\" , \"BSD License\" , \"BSD 3-Clause\" , \"BSD-3-Clause\" , \"GNU Library or Lesser General Public License (LGPL)\" , \"Microsoft Public License\" , \"MIT\" , \"MIT License\" , \"Python Software Foundation License\" , \"ISC License (ISCL)\" , \"MIT-0\" , ] More customization coming soon!","title":"Third Party License Validation"}]}